import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# solo para colab
from google.colab import files

files.upload()

# se genera la cadena con la ruta del archivo. OJO: debes colocar el nombre del archivo que tú hayas descargado

ruta = 'ca-netscience.mtx' 

#se abre el archivo y la tabla, un objeto tipo DataFrame de pandas, se guarda en la variable datos
datos = pd.read_csv(ruta,
            nrows = 10,
            skiprows = 2,
            header = None,
            sep = ' ')
#se muestra la tabla
datos

enlaces = datos[[0,1].values
enlaces

G = nx.Graph()
G.add_edges_from(enlaces)

G = nx.from_pandas_edgelist(datos, source = 0, target = 1)

plt.figure( figsize = [8,8] )
nx.draw(G,
        node_size = 100, #probar distintos valores: 50, 100, 200
        node_color = 'g', #probar distintos colores:'g', 'y', 'b', 'r', 'k'
        node_shape = '<') #probar distintos marcadores: 'o', 's', '8', '^'

plt.figure(figsize = [6,6])

A = nx.to_numpy_array(G)
plt.imshow(A, 'hot')

nx.closeness_centrality(G)
#nx.betweenness_centrality(G)
#nx.degree_centrality(G)
#nx.pagerank(G)

nx.closeness_centrality(G)[5] #ejemplo, centralidad de cercanía del nodo 5

[0, 1, 4, 9, 16, 25] # crea una lista por extensión: definimos manualmente cada elemento

[i**2 for i in range(6)] #por comprensión: los elementos son los cuadrados de los números del 0 al 5

[2*j-3 for j in range(6)] # por comprensión



diccionario = nx.degree_centrality(G)

lista = [diccionario[i] for i in G]

sizes = np.array(lista)

plt.figure(figsize = [8,8] )

nx.draw(G,
        node_size = 10000*sizes) #jugar con el factor

diccionario = nx.closeness_centrality(G)
colors = np.array([diccionario[i] for i in G])


plt.figure(figsize = [6,6])

nx.draw(G,
        node_size = 100,
        node_color = colors,
        cmap = 'viridis')

plt.figure(figsize = [7,7] )

nx.draw_kamada_kawai(G,
        node_size = 10000*sizes,
        node_color = colors)
plt.savefig('imagen.png', dpi = 300)
files.download('imagen.png')

diccionario = nx.degree_centrality(G)
d = np.array([diccionario[i] for i in G])

diccionario = nx.closeness_centrality(G)
c = np.array([diccionario[i] for i in G])

diccionario = nx.betweenness_centrality(G)
b = np.array([diccionario[i] for i in G])

diccionario = nx.eigenvector_centrality(G)
e = np.array([diccionario[i] for i in G])


plt.figure(figsize = [15, 5])
plt.plot(d, label = 'Degree')
plt.plot(c, label = 'Closeness')
plt.plot(b, label = 'Betweenness')
plt.plot(e, label = 'Eigenvector')

plt.legend()

G1 = nx.Graph()
G1.add_nodes_from([1,2,3,4,5,6])
G1.add_edges_from([ (1,2), (1,3), (2,3), (2,4), (2,5), (3,5), (5,6) ])

nx.draw(G1, with_labels = True)



nx.betweenness_centrality(G1, normalized= False, endpoints= True)
