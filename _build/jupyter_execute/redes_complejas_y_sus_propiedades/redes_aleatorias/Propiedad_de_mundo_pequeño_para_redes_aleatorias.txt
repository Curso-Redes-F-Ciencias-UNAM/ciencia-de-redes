import networkx as nx
import numpy as np
import matplotlib.pyplot as plt


k = 50 #dar un valor a k
sizes = []
average_distances = []

print('N\t|\tlog(N)\t\t|\t<d>')
print('-------------------------------------------------')
for i in range(100): 
    N = k+10*(i)
    sizes.append(N)
    p = k/(N-1)
    d = []

    G = nx.random_graphs.gnp_random_graph(N, p)
    while not nx.is_connected(G):
        G = nx.random_graphs.gnp_random_graph(10, p)
    d.append(nx.average_shortest_path_length(G))
    average_distances.append(np.mean(d))
    
    print('%i\t|\t%f\t|\t%f'%(N, np.log10(N), average_distances[-1]))

plt.figure(figsize = [10,5])
plt.plot(sizes, average_distances, label = '<d>')
plt.plot(sizes, np.log10(np.array(sizes)), '--', label = 'log(N)')

#descomentando la siguiente linea puedes cambiar a escala logaritmica en x, para comparar la distancia y al lotaritmo.
#plt.xscale('log')
plt.xlabel('N')
plt.ylabel('<d>')

plt.legend()


for i in range(1,10): 
    N = k+1000*(i)
    sizes.append(N)
    p = k/(N-1)
    d = []

    G = nx.random_graphs.gnp_random_graph(N, p)
    while not nx.is_connected(G):
        G = nx.random_graphs.gnp_random_graph(10, p)
    d.append(nx.average_shortest_path_length(G))
    average_distances.append(np.mean(d))
    
    print('%i\t|\t%f\t|\t%f'%(N, np.log10(N), average_distances[-1]))

plt.figure(figsize = [10,5])
plt.plot(sizes, average_distances, label = '<d>')
plt.plot(sizes, np.log10(np.array(sizes)), '--', label = 'log(N)')

#descomentando la siguiente linea puedes cambiar a escala logaritmica en x, para comparar la distancia y al lotaritmo.
plt.xscale('log')
plt.xlabel('N')
plt.ylabel('<d>')

plt.legend()


